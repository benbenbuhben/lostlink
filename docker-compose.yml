version: '3.8'

services:
  mongo:
    image: mongo:latest
    container_name: lostlink-mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express
    container_name: lostlink-mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=pass123
    depends_on:
      - mongo

  # --- MinIO (S3-compatible storage) ----------------------------------
  minio:
    image: minio/minio
    container_name: lostlink-minio
    restart: always
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Web console
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    depends_on:
      - mongo

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lostlink-backend
    restart: always
    ports:
      - "5001:5000"
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongo:27017/lostlink
      # MinIO / S3 config (dev)
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=lostlink-uploads
      - MINIO_PUBLIC_URL=http://192.168.86.35:9000 # replace with your MinIO host IP
      # Auth0 config
      - AUTH0_DOMAIN=dev-p3dnd83yc74l2dvq.us.auth0.com
      - AUTH0_AUDIENCE=https://lostlink-api
      # SendGrid config
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-SG.your-sendgrid-api-key-here}
      - FROM_EMAIL=rackoon1030@gmail.com
      # AWS Rekognition config
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    volumes:
      - ./backend:/usr/src/app
    command: npm run dev
    depends_on:
      - mongo
      - minio

  frontend:
    # Optional: containerised **web** build of the Expo app.
    #
    # Normal local development workflow:
    #   • Run `docker compose up -d` to start backend + DB only (this service is skipped).
    #   • In another terminal `cd frontend && npx expo start --host lan -p 19001`.
    #
    # CI / Production web deployment:
    #   • Build with profile "build-web":
    #       docker compose --profile build-web build frontend
    #   • The resulting image serves the static web export via Nginx.
    profiles:
      - build-web
    build:
      context: ./frontend
      dockerfile: Dockerfile.web   # multi-stage: node (expo export) → nginx
    container_name: lostlink-frontend-web
    ports:
      - "3000:80"                 # serves static site on host:3000 when profile is active
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    depends_on:
      - backend

volumes:
  mongo-data:
  minio-data: 